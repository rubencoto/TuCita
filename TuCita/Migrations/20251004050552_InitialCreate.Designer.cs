// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuCita.Data;

#nullable disable

namespace TuCita.Migrations
{
    [DbContext(typeof(TuCitaDbContext))]
    [Migration("20251004050552_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TuCita.Models.AgendaTurno", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fin");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inicio");

                    b.Property<ulong>("MedicoId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("medico_id");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sede_id");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("SedeId");

                    b.ToTable("agenda_turnos");
                });

            modelBuilder.Entity("TuCita.Models.Cita", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<ulong>("CreadoPor")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("creado_por");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fin");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inicio");

                    b.Property<ulong>("MedicoId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("medico_id");

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("motivo");

                    b.Property<ulong>("PacienteId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("paciente_id");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sede_id");

                    b.Property<ulong>("TurnoId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("turno_id");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("SedeId");

                    b.HasIndex("TurnoId");

                    b.ToTable("citas");
                });

            modelBuilder.Entity("TuCita.Models.Diagnostico", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong>("CitaId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cita_id");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.ToTable("diagnosticos");
                });

            modelBuilder.Entity("TuCita.Models.Especialidad", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("especialidades");
                });

            modelBuilder.Entity("TuCita.Models.MedicoEspecialidad", b =>
                {
                    b.Property<ulong>("MedicoId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("medico_id");

                    b.Property<uint>("EspecialidadId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("especialidad_id");

                    b.HasKey("MedicoId", "EspecialidadId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("medico_especialidad");
                });

            modelBuilder.Entity("TuCita.Models.MedicoSede", b =>
                {
                    b.Property<ulong>("MedicoId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("medico_id");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sede_id");

                    b.HasKey("MedicoId", "SedeId");

                    b.HasIndex("SedeId");

                    b.ToTable("medico_sede");
                });

            modelBuilder.Entity("TuCita.Models.NotaClinica", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong>("CitaId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cita_id");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<ulong>("MedicoId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("medico_id");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nota");

                    b.Property<ulong>("PacienteId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("paciente_id");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("notas_clinicas");
                });

            modelBuilder.Entity("TuCita.Models.Notificacion", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("canal");

                    b.Property<ulong?>("CitaId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cita_id");

                    b.Property<string>("Contenido")
                        .HasColumnType("JSON")
                        .HasColumnName("contenido");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<bool>("Enviada")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enviada");

                    b.Property<DateTime?>("EnviadaEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("enviada_en");

                    b.Property<string>("Error")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("error");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.Property<ulong>("UsuarioId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("notificaciones");
                });

            modelBuilder.Entity("TuCita.Models.PerfilMedico", b =>
                {
                    b.Property<ulong>("UsuarioId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<string>("Biografia")
                        .HasColumnType("TEXT")
                        .HasColumnName("biografia");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("NumeroLicencia")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("numero_licencia");

                    b.HasKey("UsuarioId");

                    b.ToTable("perfil_medico");
                });

            modelBuilder.Entity("TuCita.Models.PerfilPaciente", b =>
                {
                    b.Property<ulong>("UsuarioId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("identificacion");

                    b.Property<string>("TelefonoEmergencia")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("telefono_emergencia");

                    b.HasKey("UsuarioId");

                    b.ToTable("perfil_paciente");
                });

            modelBuilder.Entity("TuCita.Models.PerfilRecepcion", b =>
                {
                    b.Property<ulong>("UsuarioId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sede_id");

                    b.HasKey("UsuarioId");

                    b.HasIndex("SedeId");

                    b.ToTable("perfil_recepcion");
                });

            modelBuilder.Entity("TuCita.Models.Receta", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong>("CitaId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cita_id");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Indicaciones")
                        .HasColumnType("TEXT")
                        .HasColumnName("indicaciones");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.ToTable("recetas");
                });

            modelBuilder.Entity("TuCita.Models.RecetaItem", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("Dosis")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("dosis");

                    b.Property<string>("Duracion")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("duracion");

                    b.Property<string>("Frecuencia")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("frecuencia");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("medicamento");

                    b.Property<string>("Notas")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("notas");

                    b.Property<ulong>("RecetaId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("receta_id");

                    b.HasKey("Id");

                    b.HasIndex("RecetaId");

                    b.ToTable("receta_items");
                });

            modelBuilder.Entity("TuCita.Models.Rol", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("TuCita.Models.RolUsuario", b =>
                {
                    b.Property<ulong>("UsuarioId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("usuario_id");

                    b.Property<ulong>("RolId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("rol_id");

                    b.Property<DateTime>("AsignadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("asignado_en");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("roles_usuarios");
                });

            modelBuilder.Entity("TuCita.Models.Sede", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activa");

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ciudad");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("nombre");

                    b.Property<string>("Pais")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pais");

                    b.Property<string>("Provincia")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("provincia");

                    b.Property<string>("Telefono")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("sedes");
                });

            modelBuilder.Entity("TuCita.Models.Usuario", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("ActualizadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actualizado_en");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("apellido");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creado_en");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("EmailNormalizado")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email_normalizado")
                        .HasComputedColumnSql("LOWER(email)", true);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("nombre");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Telefono")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("EmailNormalizado")
                        .IsUnique();

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("TuCita.Models.AgendaTurno", b =>
                {
                    b.HasOne("TuCita.Models.PerfilMedico", "Medico")
                        .WithMany("AgendaTurnos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.Sede", "Sede")
                        .WithMany("AgendaTurnos")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("TuCita.Models.Cita", b =>
                {
                    b.HasOne("TuCita.Models.Usuario", "Creador")
                        .WithMany()
                        .HasForeignKey("CreadoPor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.PerfilMedico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.PerfilPaciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.Sede", "Sede")
                        .WithMany("Citas")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.AgendaTurno", "Turno")
                        .WithMany("Citas")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creador");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Sede");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("TuCita.Models.Diagnostico", b =>
                {
                    b.HasOne("TuCita.Models.Cita", "Cita")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("TuCita.Models.MedicoEspecialidad", b =>
                {
                    b.HasOne("TuCita.Models.Especialidad", "Especialidad")
                        .WithMany("MedicosEspecialidades")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.PerfilMedico", "Medico")
                        .WithMany("EspecialidadesMedico")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("TuCita.Models.MedicoSede", b =>
                {
                    b.HasOne("TuCita.Models.PerfilMedico", "Medico")
                        .WithMany("SedesMedico")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.Sede", "Sede")
                        .WithMany("MedicosSedes")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("TuCita.Models.NotaClinica", b =>
                {
                    b.HasOne("TuCita.Models.Cita", "Cita")
                        .WithMany("NotasClinicas")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.PerfilMedico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.PerfilPaciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("TuCita.Models.Notificacion", b =>
                {
                    b.HasOne("TuCita.Models.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TuCita.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TuCita.Models.PerfilMedico", b =>
                {
                    b.HasOne("TuCita.Models.Usuario", "Usuario")
                        .WithOne("PerfilMedico")
                        .HasForeignKey("TuCita.Models.PerfilMedico", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TuCita.Models.PerfilPaciente", b =>
                {
                    b.HasOne("TuCita.Models.Usuario", "Usuario")
                        .WithOne("PerfilPaciente")
                        .HasForeignKey("TuCita.Models.PerfilPaciente", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TuCita.Models.PerfilRecepcion", b =>
                {
                    b.HasOne("TuCita.Models.Sede", "Sede")
                        .WithMany()
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuCita.Models.Usuario", "Usuario")
                        .WithOne("PerfilRecepcion")
                        .HasForeignKey("TuCita.Models.PerfilRecepcion", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sede");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TuCita.Models.Receta", b =>
                {
                    b.HasOne("TuCita.Models.Cita", "Cita")
                        .WithMany("Recetas")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("TuCita.Models.RecetaItem", b =>
                {
                    b.HasOne("TuCita.Models.Receta", "Receta")
                        .WithMany("Items")
                        .HasForeignKey("RecetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("TuCita.Models.RolUsuario", b =>
                {
                    b.HasOne("TuCita.Models.Rol", "Rol")
                        .WithMany("RolesUsuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TuCita.Models.Usuario", "Usuario")
                        .WithMany("RolesUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TuCita.Models.AgendaTurno", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("TuCita.Models.Cita", b =>
                {
                    b.Navigation("Diagnosticos");

                    b.Navigation("NotasClinicas");

                    b.Navigation("Recetas");
                });

            modelBuilder.Entity("TuCita.Models.Especialidad", b =>
                {
                    b.Navigation("MedicosEspecialidades");
                });

            modelBuilder.Entity("TuCita.Models.PerfilMedico", b =>
                {
                    b.Navigation("AgendaTurnos");

                    b.Navigation("Citas");

                    b.Navigation("EspecialidadesMedico");

                    b.Navigation("SedesMedico");
                });

            modelBuilder.Entity("TuCita.Models.PerfilPaciente", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("TuCita.Models.Receta", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TuCita.Models.Rol", b =>
                {
                    b.Navigation("RolesUsuarios");
                });

            modelBuilder.Entity("TuCita.Models.Sede", b =>
                {
                    b.Navigation("AgendaTurnos");

                    b.Navigation("Citas");

                    b.Navigation("MedicosSedes");
                });

            modelBuilder.Entity("TuCita.Models.Usuario", b =>
                {
                    b.Navigation("PerfilMedico");

                    b.Navigation("PerfilPaciente");

                    b.Navigation("PerfilRecepcion");

                    b.Navigation("RolesUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
